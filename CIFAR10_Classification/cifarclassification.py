# -*- coding: utf-8 -*-
"""CIFARClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gg7dLyNg7evfdw4QbOByIOchuZdN77C_

# CIFAR10 Classification using CNN

A CNN model created to classify the CIFAR10 dataset into 10 categories:
* Airplane
* Automobile
* Bird
* Cat
* Deer 
* Dog
* Frog
* Horse 
* Ship
* Truck

## Importing necessary modules
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models 
import numpy as np
import matplotlib.pyplot as plt
import random as rn
from sklearn.metrics import confusion_matrix , classification_report
import tensorflow.python.keras
from tensorflow.python.keras.models import Sequential 
from tensorflow.python.keras.models import model_from_json
from tensorflow.python.keras.layers import Dense, Activation, Dropout, Flatten
from tensorflow.python.keras.layers import Conv2D, MaxPooling2D
from tensorflow.python.keras import backend as K
from keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop

"""## Gathering CIFAR10 dataset and splitting it into train and test dataset"""

(X_train,y_train), (X_test,y_test) = datasets.cifar10.load_data()

print(X_test.shape)

print(X_train.shape)

# y_train[:8]

y_train = y_train.reshape(-1,)
print(y_train)

"""## Data Visualization"""

categories = ['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']

""" fig,ax=plt.subplots(2,4)
fig.set_size_inches(15,5)
for i in range(2):
    for j in range (4):
        m=rn.randint(0,len(y_train))
        ax[i,j].imshow(X_train[m])
        ax[i,j].set_title(categories[y_train[m]])
        
plt.tight_layout() """

"""## Reshaping pixel values of images"""

X_train = X_train/255
X_test = X_test/255

"""## Building CNN Model"""

model = Sequential()

model.add(Conv2D(32, (3, 3), padding='same',input_shape=X_train.shape[1:]))
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))


model.add(Conv2D(64, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))


model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))

model.add(Dense(10))
model.add(Activation('softmax'))

# model.summary()

model.compile(loss='sparse_categorical_crossentropy',
              optimizer=RMSprop(learning_rate=0.0001),
              metrics=['accuracy'])

"""## Training our CNN Model"""

history = model.fit(X_train, y_train,
              batch_size=32,
              epochs=100,
              validation_data=(X_test, y_test))

"""## Performance of our CNN Model"""

""" plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epochs')
plt.legend(['train', 'test'])
plt.show()

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epochs')
plt.legend(['train', 'test'])
plt.show()
 """
model.evaluate(X_test,y_test)

model.save("model_cnn.h5")

"""## Results"""

predictions = model.predict(X_test)
y_pred=np.argmax(predictions,axis=1)
print(y_pred)

""" fig,ax=plt.subplots(5,5)
fig.set_size_inches(15,10)
for i in range(5):
    for j in range (5):
        m=rn.randint(0,len(y_test))
        ax[i,j].imshow(X_test[m])
        ax[i,j].set_title("Predicted Class: "+ categories[Y_pred_classes[m]])

plt.tight_layout() """